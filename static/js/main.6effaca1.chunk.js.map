{"version":3,"sources":["SplashScreen.js","PredCharts.js","App.js","index.js"],"names":["Copyright","Grid","container","spacing","alignItems","justify","item","Typography","variant","color","align","Link","href","useStyles","makeStyles","theme","paper","marginTop","display","flexDirection","grey","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","SplashScreen","handleClick","modelLoaded","classes","Container","component","maxWidth","CssBaseline","className","Button","fullWidth","onClick","console","log","Box","mt","PredCharts","data","BarChart","height","layout","fill","top","XAxis","type","domain","tickFormatter","tick","YAxis","dataKey","fontSize","Bar","food_classes_og","require","models","name","path","model","loadTime","currentLoadedModelIdx","App","webcamRef","useRef","React","useState","anchorEl","setAnchorEl","inferenceTime","setInferencetime","isModelLoaded","setModelLoaded","isSplashScreen","setIsSplashScreen","preds","setPreds","food_classes","json","ret","key","swap","scaleFactor","tf","handleMenuClose","event","myValue","currentTarget","dataset","loadModel","a","loadStart","Date","process","run","setInterval","detect","current","video","readyState","vidTensor","fromPixels","normalizedVid","div","expandDims","infrStart","predict","infrTime","useEffect","style","xs","textAlign","aria-controls","aria-haspopup","size","endIcon","Menu","id","keepMounted","open","Boolean","onClose","map","m","idx","MenuItem","data-my-value","ref","videoConstraints","facingMode","muted","zindex","position","padding","bottom","minWidth","opacity","topPreds","topPredsVals","values","dataSync","topPredsIndx","indices","predChartData","forEach","predIdx","predNum","push","food","prob","Math","round","formatPreds","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6effaca1.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/accessible-emoji */\nimport React, { useRef, useState, useEffect } from \"react\";\n\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nimport Link from \"@material-ui/core/Link\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\n\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\n\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\n\nfunction Copyright() {\n  return (\n    <Grid container spacing={1} alignItems=\"center\" justify=\"center\">\n      <Grid item>\n        {\" \"}\n        <GitHubIcon />\n      </Grid>\n\n      <Grid item>\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n          <Link color=\"inherit\" href=\"https://github.com/tomwalczak\">\n            @tomwalczak\n          </Link>\n        </Typography>\n      </Grid>\n    </Grid>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  grey: {\n    color: \"grey\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nconst SplashScreen = ({ handleClick, modelLoaded }) => {\n  const classes = useStyles();\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Typography component=\"h1\" variant=\"h4\">\n          üçî üëÄ üì±\n        </Typography>\n        <Typography component=\"h1\" variant=\"h5\">\n          Welcome to Food Vision Mobile!\n        </Typography>\n        <Typography component=\"p\" variant=\"subtitle2\" className={classes.grey}>\n          (Works best on a smartphone)\n        </Typography>\n\n        <Button\n          fullWidth\n          variant=\"contained\"\n          color=\"secondary\"\n          className={classes.submit}\n          onClick={() => {\n            console.log(modelLoaded);\n            if (modelLoaded) handleClick();\n          }}\n        >\n          {modelLoaded ? \"Let's go! üßë‚Äçüç≥ \" : \"Loading models... ü§ñ ü¶æ  \"}\n        </Button>\n      </div>\n      <Box mt={8}>\n        <Copyright />\n      </Box>\n    </Container>\n  );\n};\n\nexport default SplashScreen;\n","import React from \"react\";\nimport { BarChart, Bar, XAxis, YAxis, LabelList } from \"recharts\";\n\nconst CustomizedAxisTick = (props) => {\n  const { x, y, payload } = props;\n\n  return (\n    <text x={0} y={0} dy={16} textAnchor=\"end\" fill=\"#666\">\n      {payload.value}%\n    </text>\n  );\n};\n\nexport default function PredCharts({ data }) {\n  return (\n    <BarChart\n      width={420}\n      height={170}\n      data={data}\n      layout=\"vertical\"\n      fill=\"#fff\"\n      margin={{ top: 10 }}\n    >\n      <XAxis\n        type=\"number\"\n        domain={[0, 100]}\n        tickFormatter={(tick) => {\n          return `${tick}%`;\n        }}\n      />\n      <YAxis\n        type=\"category\"\n        dataKey=\"food\"\n        tick={{ fill: \"white\", fontSize: 12 }}\n        width={140}\n      />\n\n      <Bar dataKey=\"prob\" fill=\"#fff\"></Bar>\n    </BarChart>\n  );\n}\n","/* eslint-disable jsx-a11y/accessible-emoji */\n// Import dependencies\nimport React, { useRef, useState, useEffect } from \"react\";\n\nimport Button from \"@material-ui/core/Button\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nimport Grid from \"@material-ui/core/Grid\";\n\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\n\nimport * as tf from \"@tensorflow/tfjs\";\nimport Webcam from \"react-webcam\";\n\nimport SplashScreen from \"./SplashScreen\";\nimport PredCharts from \"./PredCharts\";\n\nimport \"./App.css\";\n\nconst food_classes_og = require(\"./food_classes.json\");\n\nfunction swap(json) {\n  var ret = {};\n  for (var key in json) {\n    ret[json[key]] = key;\n  }\n  return ret;\n}\n\nconst models = [\n  {\n    name: \"MobileNetV2_10PC_Food101_10Mb\",\n    path: \"mobilenet_v2_js_model\",\n    model: null,\n    loadTime: null,\n  },\n  {\n    name: \"ResNet50_all_Food101_90Mb\",\n    path: \"resnet_100pc_js_model\",\n    model: null,\n    loadTime: null,\n  },\n  {\n    name: \"MobileNetV2_ALL_Food101_10Mb\",\n    path: \"mobilenet_v2_100pc_js_model\",\n    model: null,\n    loadTime: null,\n  },\n];\n\nlet currentLoadedModelIdx = 0;\n\nfunction App() {\n  const webcamRef = useRef(null);\n\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [inferenceTime, setInferencetime] = React.useState(null);\n\n  const [isModelLoaded, setModelLoaded] = useState(false);\n  const [isSplashScreen, setIsSplashScreen] = useState(true);\n\n  // const [currentLoadedModelIdx, setCurrentLoadedModelIdx] = useState(0);\n\n  const [preds, setPreds] = useState();\n\n  const food_classes = swap(food_classes_og);\n\n  const scaleFactor = tf.scalar(255);\n\n  const handleMenuClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuClose = (event) => {\n    const { myValue } = event.currentTarget.dataset;\n    console.log(myValue);\n    // Can be undefined if user clicks away\n    if (myValue) currentLoadedModelIdx = myValue;\n\n    setAnchorEl(null);\n  };\n\n  const formatPreds = ({ preds, food_classes }) => {\n    if (!preds) return \"Loading predictions.. ü§ñ\";\n\n    const topPreds = tf.topk(preds, 5, true);\n\n    const topPredsVals = topPreds.values.dataSync();\n    const topPredsIndx = topPreds.indices.dataSync();\n\n    const predChartData = [];\n    topPredsIndx.forEach((predIdx, predNum) => {\n      predChartData.push({\n        food: food_classes[predIdx],\n        prob: Math.round(topPredsVals[predNum] * 1000) / 10,\n      });\n    });\n    return <PredCharts data={predChartData} />;\n  };\n\n  const renderModelStats = () => {\n    return (\n      <>\n        <div>Model loaded in: {models[currentLoadedModelIdx].loadTime} ms</div>\n        <div>Inference time was: {inferenceTime} ms</div>\n      </>\n    );\n  };\n\n  const loadModel = async () => {\n    const loadStart = new Date();\n    models[currentLoadedModelIdx].model = await tf.loadGraphModel(\n      process.env.PUBLIC_URL +\n        `/models/${models[currentLoadedModelIdx].path}/model.json`\n    );\n\n    const loadTime = new Date() - loadStart;\n    console.log(`Model loaded, took ${loadTime} ms`);\n    setModelLoaded(true);\n    models[currentLoadedModelIdx].loadTime = loadTime;\n  };\n\n  // Main function\n  const run = async () => {\n    await loadModel();\n\n    //  Loop and detect food\n    setInterval(() => {\n      detect();\n    }, 1000);\n  };\n\n  const detect = async () => {\n    // Check webcam data is available\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      const video = webcamRef.current.video;\n\n      const vidTensor = tf.browser.fromPixels(video);\n\n      const normalizedVid = vidTensor.div(scaleFactor).expandDims(0);\n\n      const infrStart = new Date();\n\n      if (models[currentLoadedModelIdx].model) {\n        const preds =\n          models[currentLoadedModelIdx].model.predict(normalizedVid);\n        const infrTime = new Date() - infrStart;\n\n        setInferencetime(infrTime);\n        setPreds(preds);\n      } else {\n        await loadModel();\n      }\n    }\n  };\n\n  useEffect(() => {\n    run();\n  }, []);\n\n  // This is necessary, see React Webcam docs\n  const videoConstraints = {\n    width: 224,\n    height: 224,\n    facingMode: \"environment\", // we're using the back camera\n  };\n\n  if (isSplashScreen)\n    return (\n      <SplashScreen\n        handleClick={() => {\n          setIsSplashScreen(false);\n        }}\n        modelLoaded={isModelLoaded}\n      />\n    );\n  else\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Grid\n            container\n            spacing={1}\n            alignItems=\"center\"\n            style={{ fontSize: 18, margin: \"0px auto\" }}\n          >\n            <Grid item xs style={{ textAlign: \"right\" }}>\n              Try model: ü§ñ{\" \"}\n            </Grid>\n            <Grid item xs style={{ textAlign: \"left\" }}>\n              {\" \"}\n              <Button\n                aria-controls=\"simple-menu\"\n                aria-haspopup=\"true\"\n                onClick={handleMenuClick}\n                variant=\"contained\"\n                color=\"secondary\"\n                size=\"small\"\n                endIcon={<ArrowDropDownIcon />}\n              >\n                {models[currentLoadedModelIdx].name}\n              </Button>\n            </Grid>\n          </Grid>{\" \"}\n          <Menu\n            id=\"simple-menu\"\n            anchorEl={anchorEl}\n            keepMounted\n            open={Boolean(anchorEl)}\n            onClose={handleMenuClose}\n          >\n            {models.map((m, idx) => (\n              <MenuItem key={idx} data-my-value={idx} onClick={handleMenuClose}>\n                {m.name}\n              </MenuItem>\n            ))}\n          </Menu>\n        </header>\n        <div className=\"App-body\">\n          <Webcam\n            ref={webcamRef}\n            height={224}\n            width={224}\n            videoConstraints={videoConstraints}\n            muted={true}\n            style={{\n              zindex: 8,\n              width: \"100vw\",\n              height: \"100%\",\n            }}\n          />\n          <div\n            style={{\n              position: \"absolute\",\n              padding: 10,\n              bottom: 0,\n              width: \"80%\",\n              maxWidth: 600,\n              minWidth: 500,\n              height: 250,\n              backgroundColor: \"#000\",\n              textAlign: \"left\",\n              fontSize: 16,\n              zindex: 9,\n              opacity: 0.8,\n            }}\n          >\n            {preds && \"What üçî üçï üçè  is this? üëÄ\"} <br />\n            {formatPreds({ preds, food_classes })}\n            {preds && renderModelStats()}\n          </div>\n        </div>\n      </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}